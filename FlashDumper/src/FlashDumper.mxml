<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:updater="http://updater.riaspace.com/"
					   width="300" height="200" creationComplete="creationCompleteHandler(event)" applicationComplete="applicationCompleteHandler(event)" xmlns:ns="http://updater.riaspace.com/">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<updater:NativeApplicationUpdater id="appUpdater"
										  updateURL="http://mbj-apps/update/flashdumper/update.xml"
										  initialized="updater_initializedHandler(event)"/>

	</fx:Declarations>
	<fx:Script>
		<![CDATA[
        import air.update.ApplicationUpdaterUI;
        import air.update.events.DownloadErrorEvent;
        import air.update.events.StatusUpdateErrorEvent;
        import air.update.events.StatusUpdateEvent;
        import air.update.events.UpdateEvent;

        import com.hexagonstar.util.debug.Debug;
        import com.riaspace.nativeApplicationUpdater.NativeApplicationUpdater;
        import com.juicebeer.elements.SpriteElement;
        import com.juicebeer.view.ImageToolTip;

        import fl.display.SafeLoader;
        import fl.text.TLFTextField;

        import mx.collections.ArrayList;

        import mx.controls.SWFLoader;
        import mx.core.IUIComponent;
        import mx.core.UIComponent;
        import mx.events.FlexEvent;
        import mx.events.ToolTipEvent;
        import mx.managers.DragManager;
        import mx.utils.StringUtil;
        import spark.core.SpriteVisualElement;

        private var loader:SafeLoader;
        private var swf:MovieClip;

        public static const UPDATE_URL:String = "http://mbj-apps/update/flashdumper/update.xml";

        protected function creationCompleteHandler(event:FlexEvent):void {
            //Helper.instance().logArea=this.logArea;
            //Security.a
            this.setApplicationVersion();

            // Configuration stuff - see update framework docs for more details
            appUpdater.isNewerVersionFunction = this.isNewerVersion;
            appUpdater.initialize();
        }

        protected function updater_initializedHandler(event:UpdateEvent):void {
            //this.appUpdater.checkForUpdate();
            //appUpdater.checkNow();
        }

        protected function applicationCompleteHandler(event:FlexEvent):void {

            this.stage.quality = StageQuality.BEST;
        }

        protected function onLoadComplete(event:Event):void {

            logLabel.text="Start export ...";

            this.swf = event.currentTarget.content as MovieClip;

            Helper.instance().swf = this.swf;
            Helper.findShareFile = false;

            var result ={};
            trace(swf.numChildren);
            for (var i:int = 0; i < swf.numChildren; i++) {
                var mv:MovieClip = swf.getChildAt(i) as MovieClip;
                if(mv.name.length > 0 && mv.name.indexOf("export_")==0)
                {
                    var animName:String = mv.name.replace("export_","");
                    var animation={};
                    result[animName] = animation;

                    var frameCount:int = mv.totalFrames;
                    var frames:Array=[];
                    animation["frames"]=frames;

                    for(var fc:int=0;fc<frameCount;fc++)
                    {
                        mv.gotoAndStop(fc);
                        var frame:Object={};

                        for(var cc:int=0; cc < mv.numChildren; cc++)
                        {
                            var child:DisplayObject = mv.getChildAt(cc);
                            if(child.name.indexOf("exp_") == 0)
                            {
                                var oName:String = child.name.replace("exp_","");
                                var oValue:Array=[];

                                oValue.push(child.x);
                                oValue.push(child.y);
                                oValue.push(child.scaleX);
                                oValue.push(child.scaleY);
                                oValue.push(child.alpha);
                                oValue.push(child.rotation);

                                frame[oName] = oValue;
                            }
                        }

                        frames.push(frame);
                    }
                }

            }

            var str:String = JSON.stringify(result);
            trace(Helper.basePath+Helper.swfName.replace(".swf",".json"));
            Helper.saveStringToFile(str,Helper.basePath.replace(".swf",".json"));

            logLabel.text="Export fnished.";
        }

        private function onError(event:ErrorEvent):void {
            //Alert.show(event.toString());

        }

        private function onUpdate(event:UpdateEvent):void {
            appUpdater.checkNow(); // Go check for an update now
        }

        // Find the current version for our Label below
        private function setApplicationVersion():void {
            var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
            var ns:Namespace = appXML.namespace();
            //foot.text = "V" + appXML.ns::versionLabel;
        }


        private function isNewerVersion(currentVersion:String, updateVersion:String):Boolean {
            return currentVersion < updateVersion;
        }
        ]]>
	</fx:Script>
	<s:nativeDragEnter>
		<![CDATA[
		if (event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
		{
			var files:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
		
			// only allow a single file to be dragged in
			if (files.length == 1)
			{
				var file:File=files[0] as File;
				if(file.nativePath.lastIndexOf('.swf')!=-1)
				{
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
					setStyle("backgroundColor", 0xccccff);
				}
			}
		}
		]]>
	</s:nativeDragEnter>

	<s:nativeDragDrop>
		<![CDATA[
		var arr:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
		var file:File=arr[0] as File;
		if(this.loader)
		{
		    this.loader.contentLoaderInfo.removeEventListener(Event.COMPLETE,onLoadComplete);
		}
		
		var bytearray:ByteArray=new ByteArray();
		var fs:FileStream=new FileStream();
		fs.open(file,FileMode.READ);
		fs.readBytes(bytearray);
		fs.close();
		
		
		// add an Application context and allow bytecode execution 
		var context:LoaderContext=new LoaderContext();
		context.allowLoadBytesCodeExecution=true;

		loader = new SafeLoader();
		loader.loadBytes(bytearray,context);
	
		loader.contentLoaderInfo.addEventListener(Event.COMPLETE,onLoadComplete)

		var index:int=file.nativePath.lastIndexOf('/');
        trace(file.nativePath);
		Helper.basePath=file.nativePath;
		]]>
	</s:nativeDragDrop>

	<s:nativeDragExit>
		<![CDATA[
		this.setStyle("backgroundColor",0xffffff);
		]]>
	</s:nativeDragExit>

    <s:Label id="logLabel" width="100%" textAlign="center" y="80" fontSize="18" text="Drop animation file here"/>

	<s:SWFLoader id="swfLoader" autoLoad="true" trustContent="false"/>
</s:WindowedApplication>
